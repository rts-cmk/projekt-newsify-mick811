/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as authenticatedIndexRouteImport } from './routes/(authenticated)/index'
import { Route as authPagesLoginRouteImport } from './routes/(auth-pages)/login'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedIndexRoute = authenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: '/(auth-pages)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authPagesLoginRoute
  '/': typeof authenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/login': typeof authPagesLoginRoute
  '/': typeof authenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(auth-pages)/login': typeof authPagesLoginRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/api/auth/$'
  id:
    | '__root__'
    | '/(authenticated)'
    | '/(auth-pages)/login'
    | '/(authenticated)/'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  authPagesLoginRoute: typeof authPagesLoginRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(auth-pages)/login': {
      id: '/(auth-pages)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface authenticatedRouteRouteChildren {
  authenticatedIndexRoute: typeof authenticatedIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedIndexRoute: authenticatedIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  authPagesLoginRoute: authPagesLoginRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
